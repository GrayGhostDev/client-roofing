name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Linting and code quality
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          pip install --upgrade pip
          pip install black==25.9.0 ruff==0.13.3 mypy==1.18.2 bandit==1.8.6 safety==3.6.2

      - name: Show tool versions
        run: |
          python --version
          pip --version
          black --version
          ruff --version
          mypy --version
          bandit --version
          safety --version

      - name: Run Black formatter check (capture logs)
        run: |
          set -o pipefail
          black --check backend/ 2>&1 | tee black_check.log || {
            echo "BLACK_FAILED=true" >> $GITHUB_ENV
            black --diff backend/ > lint_black.diff || true
          }

      - name: Run Ruff linter (capture logs)
        run: |
          set -o pipefail
          ruff check --config pyproject.toml -v backend/ 2>&1 | tee ruff_check.log || {
            echo "RUFF_FAILED=true" >> $GITHUB_ENV
            ruff check --config pyproject.toml -v backend/ > lint_ruff.txt || true
          }

      - name: Run MyPy type checker
        run: mypy backend/app --ignore-missing-imports || true

      - name: Run Bandit security linter
        run: bandit -r backend/ -ll -q || true

      - name: Upload lint logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-logs
          path: |
            black_check.log
            lint_black.diff
            ruff_check.log
            lint_ruff.txt
          if-no-files-found: ignore

      - name: Fail if lint found issues
        if: ${{ env.BLACK_FAILED == 'true' || env.RUFF_FAILED == 'true' }}
        run: |
          echo "Linting failed. See uploaded artifacts for details."
          exit 1

      - name: Check for security vulnerabilities
        run: safety check -r backend/requirements.txt

  # Unit and integration tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock faker

      - name: Run unit tests (marker: unit)
        env:
          FLASK_ENV: testing
          DATABASE_URL: sqlite:///test.db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key
        run: |
          cd backend
          pytest tests/ -m "unit" -v --maxfail=1 --disable-warnings || true

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock faker

      - name: Run unit tests with coverage
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://test:test@localhost/test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key
          PUSHER_APP_ID: test-app-id
          PUSHER_KEY: test-key
          PUSHER_SECRET: test-secret
          PUSHER_CLUSTER: test-cluster
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/htmlcov/

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test-unit

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/iswitch-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/iswitch-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: development
          push: false
          tags: iswitch-backend:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/iswitch-backend:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'iswitch-roofs'
          path: './backend'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload dependency check results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.iswitchroofs.com

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging server
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          echo "$STAGING_SSH_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << 'EOF'
            cd /app/iswitch-roofs
            git pull origin develop
            docker-compose pull
            docker-compose up -d --build
            docker-compose exec backend alembic upgrade head
          EOF

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.iswitchroofs.com/health || exit 1

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://iswitchroofs.com

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production server
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
        run: |
          echo "$PROD_SSH_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -i deploy_key -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST << 'EOF'
            cd /app/iswitch-roofs
            git pull origin main
            docker-compose -f docker-compose.yml --profile production pull
            docker-compose -f docker-compose.yml --profile production up -d
            docker-compose exec backend alembic upgrade head
          EOF

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://iswitchroofs.com/health || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance testing (optional)
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Run k6 performance tests
        uses: grafana/k6-action@v0.3.0
        with:
          filename: backend/tests/performance/k6_load_test.js
          cloud: true
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}