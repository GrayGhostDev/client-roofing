name: CI/CD Pipeline - iSwitch Roofs CRM

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality & Linting
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pylint mypy
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi

      - name: Run Black (Code Formatter Check)
        run: |
          black --check backend/

      - name: Run Flake8 (Linter)
        run: |
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Pylint
        run: |
          pylint backend/app --fail-under=8.0 || true

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety (Dependency Vulnerability Check)
        run: |
          safety check --file backend/requirements.txt || true

      - name: Run Bandit (Security Linter)
        run: |
          bandit -r backend/app -ll || true

      - name: Run Trivy (Container Security Scan)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Unit Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run tests with coverage
        env:
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key-for-ci
          JWT_SECRET_KEY: test-jwt-secret-for-ci
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY_TEST }}
          REDIS_URL: redis://localhost:6379/0
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/htmlcov/

  # Job 4: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/iswitch-roofs-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/iswitch-roofs-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/iswitch-roofs-backend:buildcache,mode=max
          build-args: |
            BUILD_TARGET=production

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-api.iswitchroofs.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render (Staging)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_STAGING: ${{ secrets.RENDER_SERVICE_ID_STAGING }}
        run: |
          curl --request POST \
            --url "https://api.render.com/v1/services/$RENDER_SERVICE_ID_STAGING/deploys" \
            --header "Authorization: Bearer $RENDER_API_KEY" \
            --header 'Content-Type: application/json' \
            --data '{"clearCache": "do_not_clear"}'

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null https://staging-api.iswitchroofs.com/health)
          if [ $response -eq 200 ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging health check failed"
            exit 1
          fi

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Staging Deployment'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 6: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.iswitchroofs.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render (Production)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_PROD: ${{ secrets.RENDER_SERVICE_ID_PROD }}
        run: |
          curl --request POST \
            --url "https://api.render.com/v1/services/$RENDER_SERVICE_ID_PROD/deploys" \
            --header "Authorization: Bearer $RENDER_API_KEY" \
            --header 'Content-Type: application/json' \
            --data '{"clearCache": "do_not_clear"}'

      - name: Wait for deployment
        run: sleep 90

      - name: Health check
        run: |
          response=$(curl --write-out '%{http_code}' --silent --output /dev/null https://api.iswitchroofs.com/health)
          if [ $response -eq 200 ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production health check failed"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          # Basic API tests
          curl -f https://api.iswitchroofs.com/api/health || exit 1
          echo "✅ Smoke tests passed"

      - name: Notify team
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Production Deployment'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: iswitch-roofs-backend
        with:
          environment: production
          version: ${{ github.sha }}

  # Job 7: Database Migration (Production)
  migrate-production:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Alembic
        run: |
          pip install alembic psycopg2-binary

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
        run: |
          cd backend
          alembic upgrade head || echo "⚠️  No migrations to run"

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: '❌ Database migration failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
