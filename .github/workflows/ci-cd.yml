name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'

jobs:
  # =================================
  # LINT AND CODE QUALITY
  # =================================
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          cd backend && pip install -r requirements.txt

      - name: Run flake8
        run: |
          cd backend
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run black (check only)
        run: |
          cd backend
          black --check app/

      - name: Run isort (check only)
        run: |
          cd backend
          isort --check-only app/

      - name: Run mypy
        run: |
          cd backend
          mypy app/ --ignore-missing-imports
        continue-on-error: true

  # =================================
  # SECURITY SCANNING
  # =================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit bandit

      - name: Run pip-audit (vulnerability check)
        run: |
          cd backend
          pip install -r requirements.txt
          pip-audit
        continue-on-error: true

      - name: Run bandit (security linter)
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json
          bandit -r app/
        continue-on-error: true

      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: backend/bandit-report.json

  # =================================
  # BACKEND TESTS
  # =================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          SECRET_KEY: test-secret-key-for-ci-cd
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci-cd
          ENVIRONMENT: testing
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # =================================
  # FRONTEND TESTS
  # =================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd frontend-streamlit
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run frontend tests
        run: |
          cd frontend-streamlit
          if [ -d "tests" ]; then pytest tests/ -v; else echo "No tests found"; fi
        continue-on-error: true

  # =================================
  # BUILD DOCKER IMAGES
  # =================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, backend-tests]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub (if secrets available)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: iswitch-crm-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-streamlit
          file: ./frontend-streamlit/Dockerfile
          push: false
          tags: iswitch-crm-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =================================
  # INTEGRATION TESTS
  # =================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services with Docker Compose
        run: |
          cd backend
          docker-compose up -d backend redis
          sleep 10

      - name: Wait for backend health
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run integration tests
        run: |
          cd backend
          docker-compose exec -T backend pytest tests/ -v -m integration
        continue-on-error: true

      - name: Stop services
        if: always()
        run: |
          cd backend
          docker-compose down -v

  # =================================
  # DEPLOY TO STAGING (optional)
  # =================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "Deploy to staging would happen here"
          echo "Example: ssh staging-server 'cd /opt/app && git pull && docker-compose up -d'"
        # Add actual deployment steps here

  # =================================
  # DEPLOY TO PRODUCTION (manual trigger)
  # =================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment:
      name: production
      url: https://crm.yourdomain.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "Production deployment requires manual approval"
          echo "Deployment steps would execute here after approval"
        # Add actual deployment steps here

      - name: Send deployment notification
        if: success()
        run: |
          echo "Deployment successful! ðŸš€"
          # Add Slack/email notification here

  # =================================
  # RELEASE NOTES (on tag)
  # =================================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
