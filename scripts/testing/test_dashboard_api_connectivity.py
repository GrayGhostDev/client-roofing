#!/usr/bin/env python3
"""
Test Streamlit Dashboard API Connectivity
Simulates all API calls made by the Conversational AI dashboard
"""

import requests
import json
from datetime import datetime

# API base URL (matching Streamlit configuration)
API_BASE = "http://localhost:8001"

def print_header(title):
    """Print formatted section header"""
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70)

def test_endpoint(name, url, expected_keys=None):
    """Test a single API endpoint"""
    try:
        response = requests.get(url, timeout=10)
        status = response.status_code

        if status == 200:
            data = response.json()
            success = data.get('success', True)

            # Check for expected keys
            missing_keys = []
            if expected_keys:
                missing_keys = [key for key in expected_keys if key not in data]

            if success and not missing_keys:
                print(f"‚úÖ {name:<40} Status: {status}  Success: {success}")
                return True, data
            elif missing_keys:
                print(f"‚ö†Ô∏è  {name:<40} Status: {status}  Missing keys: {missing_keys}")
                return False, data
            else:
                print(f"‚ö†Ô∏è  {name:<40} Status: {status}  Success: {success}")
                return False, data
        else:
            print(f"‚ùå {name:<40} Status: {status}")
            try:
                error = response.json()
                print(f"   Error: {error.get('error', 'Unknown')}")
            except:
                pass
            return False, None

    except requests.exceptions.Timeout:
        print(f"‚ùå {name:<40} TIMEOUT (>10s)")
        return False, None
    except Exception as e:
        print(f"‚ùå {name:<40} ERROR: {str(e)}")
        return False, None

def main():
    """Run all dashboard API connectivity tests"""

    print_header("STREAMLIT DASHBOARD API CONNECTIVITY TEST")
    print(f"Testing API endpoints at: {API_BASE}")
    print(f"Test started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    results = {
        'passed': 0,
        'failed': 0,
        'total': 0
    }

    # ========================================================================
    # SIDEBAR - Quick Stats
    # ========================================================================
    print_header("SIDEBAR - Quick Stats")

    passed, data = test_endpoint(
        "Analytics Overview",
        f"{API_BASE}/api/conversation/analytics/overview",
        expected_keys=['success', 'total_calls', 'total_chats']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Total Calls: {data.get('total_calls', 0)}")
        print(f"   Total Chats: {data.get('total_chats', 0)}")
    else:
        results['failed'] += 1

    # ========================================================================
    # TAB 1: Voice AI
    # ========================================================================
    print_header("TAB 1: Voice AI Monitoring")

    # Voice analytics
    passed, data = test_endpoint(
        "Voice Analytics",
        f"{API_BASE}/api/conversation/voice/analytics",
        expected_keys=['success', 'total_calls', 'automation_rate']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Total Calls: {data.get('total_calls', 0)}")
        print(f"   Automation Rate: {data.get('automation_rate', 0) * 100:.1f}%")
        print(f"   Calls Today: {data.get('calls_today', 0)}")
    else:
        results['failed'] += 1

    # Voice calls list
    passed, data = test_endpoint(
        "Voice Calls List",
        f"{API_BASE}/api/conversation/voice/calls?limit=20",
        expected_keys=['success', 'calls']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Call Records: {len(data.get('calls', []))}")
    else:
        results['failed'] += 1

    # ========================================================================
    # TAB 2: Chatbot
    # ========================================================================
    print_header("TAB 2: Chatbot Conversations")

    passed, data = test_endpoint(
        "Chatbot Conversations",
        f"{API_BASE}/api/conversation/chatbot/conversations?limit=20",
        expected_keys=['success', 'conversations']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Conversations: {data.get('count', 0)}")
    else:
        results['failed'] += 1

    # ========================================================================
    # TAB 3: Sentiment Analysis
    # ========================================================================
    print_header("TAB 3: Sentiment Analysis")

    # Sentiment trends
    passed, data = test_endpoint(
        "Sentiment Trends",
        f"{API_BASE}/api/conversation/sentiment/trends?days=30",
        expected_keys=['success', 'average_sentiment']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Average Sentiment: {data.get('average_sentiment', 0):.2f}")
        print(f"   Positive %: {data.get('positive_percentage', 0):.1f}%")
        print(f"   Negative %: {data.get('negative_percentage', 0):.1f}%")
    else:
        results['failed'] += 1

    # Sentiment alerts
    passed, data = test_endpoint(
        "Sentiment Alerts",
        f"{API_BASE}/api/conversation/sentiment/alerts?limit=10",
        expected_keys=['success', 'alerts']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Active Alerts: {len(data.get('alerts', []))}")
    else:
        results['failed'] += 1

    # ========================================================================
    # TAB 4: Call Transcription
    # ========================================================================
    print_header("TAB 4: Call Transcription")

    passed, data = test_endpoint(
        "Transcription Analytics",
        f"{API_BASE}/api/transcription/analytics",
        expected_keys=['success', 'metrics', 'ai_service']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        metrics = data.get('metrics', {})
        print(f"   Transcribed Calls: {metrics.get('transcribed_calls', 0)}")
        print(f"   Transcription Rate: {metrics.get('transcription_rate', 0):.1f}%")
        print(f"   AI Service: {data.get('ai_service', 'Unknown')}")
    else:
        results['failed'] += 1

    # ========================================================================
    # TAB 5: Analytics
    # ========================================================================
    print_header("TAB 5: Analytics Performance")

    passed, data = test_endpoint(
        "Performance Metrics",
        f"{API_BASE}/api/conversation/analytics/performance",
        expected_keys=['success']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Performance data loaded successfully")
    else:
        results['failed'] += 1

    # ========================================================================
    # HEALTH CHECKS
    # ========================================================================
    print_header("HEALTH CHECKS")

    # Conversation health
    passed, data = test_endpoint(
        "Conversation API Health",
        f"{API_BASE}/api/conversation/health",
        expected_keys=['status', 'database']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Status: {data.get('status', 'unknown')}")
        print(f"   Database: {data.get('database', 'unknown')}")
    else:
        results['failed'] += 1

    # Transcription health
    passed, data = test_endpoint(
        "Transcription API Health",
        f"{API_BASE}/api/transcription/health",
        expected_keys=['status', 'openai_configured']
    )
    results['total'] += 1
    if passed:
        results['passed'] += 1
        print(f"   Status: {data.get('status', 'unknown')}")
        print(f"   OpenAI Configured: {data.get('openai_configured', False)}")
        print(f"   Model: {data.get('model', 'unknown')}")
    else:
        results['failed'] += 1

    # ========================================================================
    # FINAL RESULTS
    # ========================================================================
    print_header("TEST RESULTS SUMMARY")

    print(f"\nüìä Endpoint Testing Results:")
    print(f"   Total Endpoints Tested: {results['total']}")
    print(f"   ‚úÖ Passed: {results['passed']}")
    print(f"   ‚ùå Failed: {results['failed']}")

    success_rate = (results['passed'] / results['total'] * 100) if results['total'] > 0 else 0
    print(f"\n   Success Rate: {success_rate:.1f}%")

    if results['failed'] == 0:
        print("\nüéâ ALL TESTS PASSED! Dashboard is ready for use.")
        print("   ‚úÖ Backend API fully operational")
        print("   ‚úÖ All endpoints return 200")
        print("   ‚úÖ Real data integration working")
        print("   ‚úÖ OpenAI integration configured")
        print("\nüìù Note: Metrics show 0 values because database is empty.")
        print("   This is CORRECT behavior - add data to see non-zero values.")
        return 0
    else:
        print("\n‚ö†Ô∏è  SOME TESTS FAILED - See errors above")
        print(f"   {results['failed']} endpoint(s) need attention")
        return 1

    print("\n" + "="*70)
    print(f"Test completed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*70 + "\n")

if __name__ == "__main__":
    exit(main())
